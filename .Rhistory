library(usethis)
use_package_doc()
use_vignette("Intro")
use_readme_md()
#View(airquality)
crosstab <- function(data, rowvar, colvar,
type=c("freq", "rowpercent", "colpercent"),
total=TRUE, na.rm=FALSE,
digits=2){
require(dplyr)
if (!is.factor(rowvar))
rowvar <- as.factor(rowvar)
if (!is.factor(colvar))
colvar <- as.factor(colvar)
rowvar <- enquo(rowvar)
colvar <- enquo(colvar)
t <- table(data$rowvar, data$colvar)
names(dimnames(tb)) <- c(deparse(substitute(rowvar)), deparse(substitute(colvar)))  if (na.rm==TRUE)
t <- table(!!data$rowvar, !!data$colvar, useNA = c("ifany"))
if (total==TRUE)
t <- addmargins(t, FUN=list("<Total>"=sum))
if (type=="freq")
t
if (type=="rowpercent")
t <- replace(t, TRUE, sprintf(paste0("%.",digits,"f%%"),prop.table(t,1)*100))
if (type=="colpercent")
t <- replace(t, TRUE, sprintf(paste0("%.",digits,"f%%"),prop.table(t,2)*100))
if (type=="cellpercent")
t <- replace(t, TRUE, sprintf(paste0("%.",digits,"f%%"),prop.table(t)*100))
return(t)
}
#View(airquality)
crosstab <- function(data, rowvar, colvar,
type=c("freq", "rowpercent", "colpercent"),
total=TRUE, na.rm=FALSE,
digits=2){
require(dplyr)
if (!is.factor(rowvar))
rowvar <- as.factor(rowvar)
if (!is.factor(colvar))
colvar <- as.factor(colvar)
rowvar <- enquo(rowvar)
colvar <- enquo(colvar)
t <- table(data$rowvar, data$colvar)
names(dimnames(tb)) <- c(deparse(substitute(rowvar)), deparse(substitute(colvar)))  if (na.rm==TRUE)
t <- table(!!data$rowvar, !!data$colvar, useNA = c("ifany"))
if (total==TRUE)
t <- addmargins(t, FUN=list("<Total>"=sum))
if (type=="freq")
t
if (type=="rowpercent")
t <- replace(t, TRUE, sprintf(paste0("%.",digits,"f%%"),prop.table(t,1)*100))
if (type=="colpercent")
t <- replace(t, TRUE, sprintf(paste0("%.",digits,"f%%"),prop.table(t,2)*100))
if (type=="cellpercent")
t <- replace(t, TRUE, sprintf(paste0("%.",digits,"f%%"),prop.table(t)*100))
return(t)
}
install.packages("rio")
library(rio)
install_formats()
convert("border.csv", "border.rda")
setwd("~/Documents/R Projects")
load("~/Documents/R Projects/qacr/data/border.rda")
View(x)
convert("border.csv", "border.rda")
View(border.rda)
border.rda
View(border.rda)
load("~/Documents/R Projects/qacr/data/border.rda")
View(border.rda)
setwd("~/Documents/R Projects/qacr")
View(border.rda)
load(border.rda)
load("~/Documents/R Projects/qacr/data/border.rda")
View(border.rda)
border <- x
crosstab <- function(data, rowvar, colvar, type="freq",
total=TRUE, na.rm=FALSE,
digits){
rowvar <- deparse(substitute(rowvar))
colvar <- deparse(substitute(colvar))
if (!is.factor(data[[rowvar]]))
data[[rowvar]] <- as.factor(data[[rowvar]])
if (!is.factor(data[[colvar]]))
data[[colvar]] <- as.factor(data[[colvar]])
tb <- table(data[[rowvar]], data[[colvar]])
names(dimnames(tb)) <- c(rowvar, colvar)
if (na.rm==TRUE)
tb <- table(data[[rowvar]], data[[colvar]], useNA = c("ifany"))
if (total==TRUE)
tb <- addmargins(tb, FUN=list("<Total>"=sum))
if (type=="freq")
tb
if (type=="rowpercent")
tb <- replace(tb, TRUE, sprintf(paste0("%.",digits,"f%%"),prop.table(tb,1)*100))
if (type=="colpercent")
tb <- replace(tb, TRUE, sprintf(paste0("%.",digits,"f%%"),prop.table(tb,2)*100))
if (type=="cellpercent")
tb <- replace(tb, TRUE, sprintf(paste0("%.",digits,"f%%"),prop.table(tb)*100))
return(tb)
}
install.packages("e1071")
library(qacr)
help("qacr")
head(border)
load("~/Documents/R Projects/qacr/data/border.rda")
head(oil)
return(tb)
#' @title Two Way Frequency Table
#' @description This function creates a two way frequency table.
#' @param data data frame
#' @param rowvar row factor (unquoted)
#' @param colvar column factor (unquoted)
#' @param type table contains one of:c("freq", "rowpercent", "colpercent")
#' representing frequencies, cell percents, row percents, or column percents
#' @param total if TRUE, includes total percents, Default: TRUE
#' @param na.rm if TRUE, deletes cases with missing values, Default: FALSE
#' @param digits number of decimal digits to report for percents, Default: 2
#' @return two way frequency table
#' @details This function creates a two way frequency table that returns a table
#' printed with rows and columns, percents with the percentage sign, a level
#' labeled <NA> if na.rm = FALSE, and a level labeled <Total> if total = TRUE.
#' This function coerces x into a factor if it is not already a factor.
#' @examples
#' crosstab(mtcars, cyl, gear, type="freq", digits=2)
#' crosstab(mtcars, cyl, gear, type="rowpercent", digits=2)
#' @rdname crosstab
#' @export
crosstab <- function(data, rowvar, colvar, type="freq",
total=TRUE, na.rm=FALSE,
digits){
rowvar <- deparse(substitute(rowvar))
colvar <- deparse(substitute(colvar))
if (!is.factor(data[[rowvar]]))
data[[rowvar]] <- as.factor(data[[rowvar]])
if (!is.factor(data[[colvar]]))
data[[colvar]] <- as.factor(data[[colvar]])
tb <- table(data[[rowvar]], data[[colvar]])
names(dimnames(tb)) <- c(rowvar, colvar)
if (na.rm==TRUE)
tb <- table(data[[rowvar]], data[[colvar]], useNA = c("ifany"))
if (total==TRUE)
tb <- addmargins(tb, FUN=list("<Total>"=sum))
if (type=="freq")
tb
if (type=="rowpercent")
tb <- replace(tb, TRUE, sprintf(paste0("%.",digits,"f%%"),prop.table(tb,1)*100))
if (type=="colpercent")
tb <- replace(tb, TRUE, sprintf(paste0("%.",digits,"f%%"),prop.table(tb,2)*100))
if (type=="cellpercent")
tb <- replace(tb, TRUE, sprintf(paste0("%.",digits,"f%%"),prop.table(tb)*100))
return(tb)
}
crosstab <- function(data, rowvar, colvar, type="freq",
total=TRUE, na.rm=FALSE,
digits){
rowvar <- deparse(substitute(rowvar))
colvar <- deparse(substitute(colvar))
if (!is.factor(data[[rowvar]]))
data[rowvar] <- as.factor(data[[rowvar]])
if (!is.factor(data[[colvar]]))
data[colvar] <- as.factor(data[[colvar]])
tb <- table(data[[rowvar]], data[[colvar]])
names(dimnames(tb)) <- c(rowvar, colvar)
if (na.rm==TRUE)
tb <- table(data[[rowvar]], data[[colvar]], useNA = c("ifany"))
names(dimnames(tb)) <- c(rowvar, colvar)
if (type=="freq")
tb
if (type=="rowpercent")
tb <- round(prop.table(tb,1), digits+2)
if (type=="colpercent")
tb <- round(prop.table(tb,2), digits+2)
if (type=="cellpercent")
tb <- round(prop.table(tb),digits+2)
if (total==TRUE)
tb <- addmargins(tb, FUN=list("<Total>"=sum), quiet=TRUE)
result <- list(type=type, digits=digits, tb=tb)
class(result) <- c("crosstab","list")
return(result)
}
read.csv("hate_crimes.rda")
setwd("~/Documents/R Projects/qacr/data")
read.csv("hate_crimes.rda")
load("~/Documents/R Projects/qacr/data/hate_crimes.rda")
View(x)
x
hate_crimes <- x
Save(hate_crimes, file = "hate_crimes.rda")
save(hate_crimes, file = "hate_crimes.rda")
read.csv("border.rda")
load("~/Documents/R Projects/qacr/data/border.rda")
border <- x
save(border, file = "border.rda")
print.crosstab <- function(x, ...) {
if(!inherits(x, "crosstab")) stop("Must be a crosstab")
if(x$type != "freq")
x$tb <- replace(x$tb, TRUE, sprintf(paste0("%.",x$digits,"f%%"),x$tb*100))
print.table(x$tb)
}
print.crosstab <- function(x, ...) {
if(!inherits(x, "crosstab")) stop("Must be a crosstab")
if(x$type != "freq")
x$tb <- replace(x$tb, TRUE, sprintf(paste0("%.",x$digits,"f%%"),x$tb*100))
print.table(x$tb)
}
?print.tab
library(usethis)
use_vignette("Intro_Crosstab")
print.crosstab(mycrosstab)
mycrosstab <- crosstab(mtcars, cyl, gear, type = "freq", digits = 2)
print.crosstab(mycrosstab)
mycrosstab <- crosstab(mtcars, cyl, gear, type = "freq", digits = 2)
print.crosstab(mycrosstab)
load("~/Documents/R Projects/qacr/data/border.rda")
?crosstab
library(qacr)
?crosstab
library(qacr)
?crosstab
?print.crosstab
#' @title print.crosstab
#' @description This function prints the results of a calculated two-way
#' frequency table.
#' @param x An object of class \code{crosstab}
#' @param ... Parameters passed to print function
#' @return NULL
#' @examples
#' mycrosstab <- crosstab(mtcars, cyl, gear, type = "freq", digits = 2)
#' print(mycrosstab)
#'
#' mycrosstab <- crosstab(mtcars, cyl, gear, type = "rowpercent", digits = 3)
#' print(mycrosstab)
#' @rdname print.crosstab
#' @export
print.crosstab <- function(x, ...) {
if(!inherits(x, "crosstab")) stop("Must be a crosstab")
if(x$type != "freq")
x$tb <- replace(x$tb, TRUE, sprintf(paste0("%.",x$digits,"f%%"),x$tb*100))
print.table(x$tb)
}
?print.crosstab
?crosstab
print(mycrosstab)
?crosstab
?print.crosstab
#' @title print.crosstab
#' @description This function prints the results of a calculated two-way
#' frequency table.
#' @param x An object of class \code{crosstab}
#' @param ... Parameters passed to print function
#' @return a two-way frequency table
#' @examples
#' mycrosstab <- crosstab(mtcars, cyl, gear, type = "freq", digits = 2)
#' print(mycrosstab)
#' mycrosstab <- crosstab(mtcars, cyl, gear, type = "rowpercent", digits = 3)
#' print(mycrosstab)
#' @rdname print.crosstab
#' @export
print.crosstab <- function(x, ...) {
if(!inherits(x, "crosstab")) stop("Must be a crosstab")
if(x$type != "freq")
x$tb <- replace(x$tb, TRUE, sprintf(paste0("%.",x$digits,"f%%"),x$tb*100))
print.table(x$tb)
}
?print.crosstab
#' @title print.crosstab
#' @description This function prints the results of a calculated two-way
#' frequency table.
#' @param x An object of class \code{crosstab}
#' @param ... Parameters passed to print function
#' @return NULL
#' @details This function prints the crosstab function. Help for crosstab can
#' be found at ?crosstab
#' @examples
#' mycrosstab <- crosstab(mtcars, cyl, gear, type = "freq", digits = 2)
#' print(mycrosstab)
#' mycrosstab <- crosstab(mtcars, cyl, gear, type = "rowpercent", digits = 3)
#' print(mycrosstab)
#' @rdname print.crosstab
#' @export
print.crosstab <- function(x, ...) {
if(!inherits(x, "crosstab")) stop("Must be a crosstab")
if(x$type != "freq")
x$tb <- replace(x$tb, TRUE, sprintf(paste0("%.",x$digits,"f%%"),x$tb*100))
print.table(x$tb)
}
?print.crosstab
#' @title print.crosstab
#' @description This function prints the results of a calculated two-way
#' frequency table.
#' @param x An object of class \code{crosstab}
#' @param ... Parameters passed to print function
#' @return NULL
#' @examples
#' mycrosstab <- crosstab(mtcars, cyl, gear, type = "freq", digits = 2)
#' print(mycrosstab)
#' mycrosstab <- crosstab(mtcars, cyl, gear, type = "rowpercent", digits = 3)
#' print(mycrosstab)
#' }
#' @rdname print.crosstab
#' @export
print.crosstab <- function(x, ...) {
if(!inherits(x, "crosstab")) stop("Must be a crosstab")
if(x$type != "freq")
x$tb <- replace(x$tb, TRUE, sprintf(paste0("%.",x$digits,"f%%"),x$tb*100))
print.table(x$tb)
}
?print.crosstab
library(qacr)
?print.crosstab
#' @title print.crosstab
#' @description This function prints the results of a calculated two-way
#' frequency table.
#' @param x An object of class \code{crosstab}
#' @param ... Parameters passed to print function
#' @return NULL
#' @examples
#' mycrosstab <- crosstab(mtcars, cyl, gear, type = "freq", digits = 2)
#' print.crosstab(mycrosstab)
#' mycrosstab <- crosstab(mtcars, cyl, gear, type = "rowpercent", digits = 3)
#' print.crosstab(mycrosstab)
#' @rdname print.crosstab
#' @export
print.crosstab <- function(x, ...) {
if(!inherits(x, "crosstab")) stop("Must be a crosstab")
if(x$type != "freq")
x$tb <- replace(x$tb, TRUE, sprintf(paste0("%.",x$digits,"f%%"),x$tb*100))
print.table(x$tb)
}
?print.crosstab
#' @title print.crosstab
#' @description This function prints the results of a calculated two-way
#' frequency table.
#' @param x An object of class \code{crosstab}
#' @param ... Parameters passed to print function
#' @return NULL
#' @examples
#' mycrosstab <- crosstab(mtcars, cyl, gear, type = "freq", digits = 2)
#' print(mycrosstab)
#' mycrosstab <- crosstab(mtcars, cyl, gear, type = "rowpercent", digits = 3)
#' print(mycrosstab)
#' @rdname print.crosstab
#' @export
print.crosstab <- function(x, ...) {
if(!inherits(x, "crosstab")) stop("Must be a crosstab")
if(x$type != "freq")
x$tb <- replace(x$tb, TRUE, sprintf(paste0("%.",x$digits,"f%%"),x$tb*100))
print.table(x$tb)
}
?print.crosstab
?print.tab
?crosstab
?print.tab
mycrosstab <- crosstab(mtcars, cyl, gear, type = "rowpercent", digits = 3)
print(mycrosstab)
library(qacr)
?print.crosstab
library(qacr)
?print.crosstab
rm(print.crosstab)
rm(crosstab)
library(qacr)
?print.crosstab
?qacr
library(qacr)
?crosstab
library(qacr)
?print.crosstab
?border
?hate_crimes
?oil
?hate_crimes
library(qacr)
